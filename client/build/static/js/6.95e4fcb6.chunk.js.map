{"version":3,"sources":["helpers/regex.js","Components/CustomComponents/OtpInput/Elements.js","Components/CustomComponents/OtpInput/index.js","Screens/LoginScreen/Elements.js","assets/images/signin-img.jpg","Components/LayoutComponents/Forms/SignInForm/Elements.js","Components/CustomComponents/ForgotPassword/Elements.js","Components/CustomComponents/ForgotPassword/index.js","Components/LayoutComponents/Forms/SignInForm/index.js","Screens/LoginScreen/index.js"],"names":["EmailRegEx","NumberRegEx","ModalContainer","styled","div","Title","InputContainer","disabled","Info","p","svg","OTPContainer","setVisible","login","password","navigate","useNavigate","useState","otp","setResult","verifyOTP","a","server","patch","res","notification","message","data","setTimeout","res2","description","console","log","response","length","onChange","containerClassName","inputClassName","inputType","SignInContainer","motion","ImageContainer","img","FormContainer","SignInFromContainer","LogoImg","InputField","Input","InputFieldPassword","PasswordInput","SubmitButton","Button","BtnLink","NavLink","ForgotBTN","button","BTNContainer","FSignInButtom","GSignInButton","h4","ResetFields","Password","ForgotPassword","Form","useForm","form","loading","setLoading","setPassword","cred","setCred","isOTP","setIsOTP","BtnRef","useRef","onFinish","values","status","OtpInput","type","name","layout","onFinishFailed","autoComplete","requiredMark","Item","label","className","hasFeedback","rules","required","validator","_","value","test","Promise","resolve","reject","Error","placeholder","dependencies","getFieldValue","htmlType","ref","Schema","warning","SignInForm","dispatch","useDispatch","visible","current","blur","resetFields","signIn","onGoogleLogin","footer","centered","onCancel","maskClosable","to","src","Logo","alt","error","prefix","color","min","settings","colorScheme","levels","height","alwaysVisible","justify","onClick","title","appId","process","callback","render","renderProps","fields","icon","FacebookFilled","placement","clientId","GoogleOutlined","onSuccess","transition","duration","ease","LoginScreen","initial","opacity","y","animate","exit","SignInImg","bgImg"],"mappings":"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","file":"static/js/6.95e4fcb6.chunk.js","sourcesContent":["export const EmailRegEx = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/\r\nexport const NumberRegEx = /^[+]+[0-9]+$/","import styled from \"styled-components\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  /* background-color: #fff; */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  flex: 0.3;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n  letter-spacing: 1px;\r\n  @media screen and (max-width:280px) {\r\n      font-size: 1rem;\r\n  }\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  flex: 0.7;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  opacity: ${({ disabled }) => (disabled ? \"50%\" : \"100%\")};\r\n  pointer-events: ${({ disabled }) => (disabled ? \"none\" : \"\")};\r\n`;\r\n\r\nexport const Info = styled.p`\r\n  font-size: 0.9rem;\r\n  text-align: center;\r\n  @media screen and (max-width:280px) {\r\n      font-size: 0.6rem;\r\n  }\r\n`;\r\n\r\nexport const SVG = styled.svg`\r\n  position: absolute;\r\n  left: -12vh;\r\n  top: -30%;\r\n  width: 32.223415682062296vh;\r\n  height: 40.223415682062296vh;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-image: url(\"data:image/svg+xml;utf8, %3Csvg width='100%25' height='100%25' viewBox='0 0 1000 1000' xmlns='http://www.w3.org/2000/svg' %3E %3Cdefs%3E %3Cfilter id='grain' x='-50vw' y='-50vh' width='100vw' height='100vh'%3E %3CfeFlood flood-color='%23ffffff' result='neutral-gray' /%3E %3CfeTurbulence in='neutral-gray' type='fractalNoise' baseFrequency='2.5' numOctaves='100' stitchTiles='stitch' result='noise' /%3E %3CfeColorMatrix in='noise' type='saturate' values='0' result='destaturatedNoise' %3E%3C/feColorMatrix%3E %3CfeComponentTransfer in='desaturatedNoise' result='theNoise'%3E %3CfeFuncA type='table' tableValues='0 0 0.1 0'%3E%3C/feFuncA%3E %3C/feComponentTransfer%3E %3CfeBlend in='SourceGraphic' in2='theNoise' mode='soft-light' result='noisy-image' /%3E %3C/filter%3E %3CclipPath id='shape'%3E %3Cpath fill='currentColor' d='M613,677Q295,854,294.5,498.5Q294,143,612.5,321.5Q931,500,613,677Z'%3E%3C/path%3E %3C/clipPath%3E %3C/defs%3E %3Cg filter='url(%23grain)' clip-path='url(%23shape)'%3E %3Cpath fill='%23fd6e21' d='M613,677Q295,854,294.5,498.5Q294,143,612.5,321.5Q931,500,613,677Z' /%3E %3C/g%3E %3C/svg%3E\");\r\n  opacity: 10%;\r\n\r\n  @media screen and (max-width:768px){\r\n    top: -40%;\r\n  }\r\n  @media screen and (max-width:480px){\r\n    top: -20%;\r\n  }\r\n  @media screen and (max-width:360px){\r\n    top: -15%;\r\n  }\r\n  @media screen and (max-width:280px){\r\n    top: -10%;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { ModalContainer, Title, InputContainer, Info } from \"./Elements\";\r\nimport AuthCode from \"react-auth-code-input\";\r\nimport server from \"../../../Axios\";\r\nimport { notification } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\n\r\nconst OTPContainer = ({ setVisible, login, password }) => {\r\n  const navigate = useNavigate();\r\n  const [otp, setResult] = useState(\"\");\r\n\r\n  const verifyOTP = async () => {\r\n    try {\r\n      const res = await server.patch(`/auth/verify-otp`, { login, otp });\r\n      if (!password) {\r\n        notification[\"success\"]({\r\n          message: `${res?.data?.message}`,\r\n        });\r\n        setVisible(false);\r\n        setResult(\"\");\r\n        setTimeout(() => {\r\n          navigate(\"/signin\");\r\n        }, 500);\r\n      } else {\r\n        const res2 = await server.patch(\"/auth/reset-password\", {\r\n          password,\r\n          login,\r\n        });\r\n        notification[\"success\"]({\r\n          description: `${res2?.data?.message}`,\r\n        });\r\n        setVisible(false);\r\n        setResult(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      notification[\"error\"]({\r\n        message: `${error.response.data.message}`,\r\n        description: \"Cannot verify your otp at the moment\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // const verifyOTPReset = async () => {\r\n  //   try {\r\n  //     await server.patch(`/auth/verify-otp`, { login, otp });\r\n  //     const res2 = await server.patch(`/auth/reset-password`, {\r\n  //       login,\r\n  //       password: password.newpassword,\r\n  //     });\r\n  //     setResult(\"\");\r\n  //     setVisible(false);\r\n  //     notification[\"success\"]({\r\n  //       message: `${res2?.data?.message}`,\r\n  //     });\r\n  //   } catch (error) {\r\n  //     notification[\"error\"]({\r\n  //       message: `${error.response.data.message}`,\r\n  //       description: \"Cannot change your password at the moment\",\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  const handleOnChange = (res) => {\r\n    setResult(res);\r\n  };\r\n  if (otp.length === 4) {\r\n    verifyOTP();\r\n  }\r\n  return (\r\n    <>\r\n      <ModalContainer>\r\n        <Title>Account Verification</Title>\r\n        <InputContainer disabled={false}>\r\n          <Info>\r\n            Please use the otp that was shared on\r\n            <br />\r\n            {login}\r\n          </Info>\r\n          <AuthCode\r\n            length={4}\r\n            onChange={handleOnChange}\r\n            containerClassName=\"container\"\r\n            inputClassName=\"input\"\r\n            inputType=\"number\"\r\n          />\r\n        </InputContainer>\r\n      </ModalContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OTPContainer;\r\n","import styled from \"styled-components\";\r\nimport {motion} from 'framer-motion'\r\nexport const SignInContainer = styled(motion.div)`\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100vw;\r\n  background-color: #FFF;\r\n  @media screen and (max-height: 700px){\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.img`\r\n  flex: 0.5;\r\n  height: 100vh;\r\n  max-width: 50%;\r\n  object-fit: cover;\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n\r\n`;\r\nexport const FormContainer = styled.div`\r\n  flex: 0.5;\r\n  height: 100vh;\r\n  background-color: #ffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  @media screen and (max-width: 768px) {\r\n    flex: 1;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/signin-img.f80c4644.jpg\";","import styled from \"styled-components\";\r\nimport { Input, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PasswordInput } from \"antd-password-input-strength\";\r\nexport const SignInFromContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: max-content;\r\n  background-color: #fff;\r\n  padding: 1rem 1rem;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    z-index: 5;\r\n  }\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n  height: 13.426423200859292vh;\r\n  width: 12.352309344790548vh;\r\n  margin-bottom: 50px;\r\n  @media screen and (max-width: 768px) {\r\n    height: 12.352309344790548vh;\r\n    width: 11.815252416756175vh;\r\n    margin-bottom: 40px;\r\n  }\r\n`;\r\n\r\nexport const InputField = styled(Input)`\r\n  height: 50px;\r\n  width: 26.609898882384247vw;\r\n  border-radius: 5px;\r\n  :hover {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\nexport const InputFieldPassword = styled(PasswordInput)`\r\n  height: 50px;\r\n  width: 26.609898882384247vw;\r\n  border-radius: 5px;\r\n  :hover {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\nexport const SubmitButton = styled(Button)`\r\n  background-color: #fc6e20;\r\n  border-color: #fc6e20;\r\n  font-weight: 500;\r\n  height: 45px;\r\n  width: 26.609898882384247vw;\r\n  border-radius: 5px;\r\n  margin-top: 5px;\r\n  :hover,\r\n  :active,\r\n  :focus {\r\n    background-color: #fff;\r\n    color: #fc6e20;\r\n    box-shadow: none !important;\r\n    border: 1px solid #fc6e20;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\nexport const BtnLink = styled(NavLink)`\r\n  color: #424242;\r\n  display: inline-block;\r\n  ::after {\r\n    content: \"\";\r\n    display: block;\r\n    width: 0;\r\n    height: 2px;\r\n    background: #fc6e20;\r\n    transition: width 0.3s cubic-bezier(0, 0.89, 0.75, 0.9);\r\n  }\r\n  :hover::after {\r\n    width: 100%;\r\n    //transition: width .3s;\r\n  }\r\n  :hover {\r\n    color: #424242;\r\n  }\r\n`;\r\n\r\nexport const ForgotBTN = styled.button`\r\n  color: #424242;\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  ::after {\r\n    content: \"\";\r\n    display: block;\r\n    width: 0;\r\n    height: 2px;\r\n    background: #fc6e20;\r\n    transition: width 0.3s cubic-bezier(0, 0.89, 0.75, 0.9);\r\n  }\r\n  :hover::after {\r\n    width: 100%;\r\n    //transition: width .3s;\r\n  }\r\n  :hover {\r\n    color: #424242;\r\n  }\r\n`;\r\n\r\nexport const BTNContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n  /* margin-top: 0.5; */\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const FSignInButtom = styled(Button)`\r\n  background-color: #4267b2;\r\n  border-color: #4267b2;\r\n  font-weight: 500;\r\n  height: 45px;\r\n  width: 26.609898882384247vw;\r\n  border-radius: 5px;\r\n  margin-top: 5px;\r\n  :hover,\r\n  :active,\r\n  :focus {\r\n    background-color: #fff;\r\n    color: #4267b2;\r\n    box-shadow: none !important;\r\n    border: 1px solid #4267b2;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\n\r\nexport const GSignInButton = styled(Button)`\r\n  background-color: #db4437;\r\n  border-color: #db4437;\r\n  font-weight: 500;\r\n  height: 45px;\r\n  width: 26.609898882384247vw;\r\n  border-radius: 5px;\r\n  margin-top: 20px;\r\n  :hover,\r\n  :active,\r\n  :focus {\r\n    background-color: #fff;\r\n    color: #db4437;\r\n    box-shadow: none !important;\r\n    border: 1px solid #db4437;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { Input, Button } from \"antd\";\r\nexport const ModalContainer = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Title = styled.h4`\r\n  font-size: 1.6rem;\r\n  color: #424242;\r\n  font-weight: 400;\r\n  flex: 0.6;\r\n`;\r\n\r\nexport const FormContainer = styled.div`\r\n  flex: 0.4;\r\n  padding: 0 20px;\r\n`;\r\nexport const InputField = styled(Input)`\r\n  height: 50px;\r\n  width: 24.609898882384247vw;\r\n\r\n  border-radius: 5px;\r\n  :hover {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  :active {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  :focus {\r\n    border-color: #fc6e20 !important;\r\n    box-shadow: none;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\n\r\nexport const ResetFields = styled(Input.Password)`\r\n  height: 50px;\r\n  width: 24.609898882384247vw;\r\n  margin-bottom: 10px;\r\n\r\n  border-radius: 5px;\r\n  :hover {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  :active {\r\n    border-color: #fc6e20 !important;\r\n  }\r\n  :focus {\r\n    border-color: #fc6e20 !important;\r\n    box-shadow: none;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\n\r\nexport const SubmitButton = styled(Button)`\r\n  background-color: #fc6e20;\r\n  border-color: #fc6e20;\r\n  font-weight: 500;\r\n  height: 45px;\r\n  width: 24.609898882384247vw;\r\n  border-radius: 5px;\r\n  margin-top: 5px;\r\n  :hover,\r\n  :active,\r\n  :focus {\r\n    background-color: #fff;\r\n    color: #fc6e20;\r\n    box-shadow: none !important;\r\n    border: 1px solid #fc6e20;\r\n  }\r\n  @media screen and (min-width: 2560px) {\r\n    height: 70px;\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n  @media screen and (max-height: 700px) {\r\n    height: 7vh;\r\n  }\r\n`;\r\n","import React, { useState, useRef } from \"react\";\r\nimport {\r\n  ModalContainer,\r\n  Title,\r\n  FormContainer,\r\n  InputField,\r\n  SubmitButton,\r\n  ResetFields,\r\n} from \"./Elements\";\r\nimport { Form, notification } from \"antd\";\r\nimport { EmailRegEx, NumberRegEx } from \"../../../helpers/regex\";\r\nimport OtpInput from \"../OtpInput\";\r\nimport server from \"../../../Axios\";\r\nimport \"./styles.scss\";\r\nconst ForgotPassword = ({ setVisible }) => {\r\n  const [form] = Form.useForm();\r\n  const [loading, setLoading] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [cred, setCred] = useState(\"\");\r\n  const [isOTP, setIsOTP] = useState(false);\r\n  const BtnRef = useRef(null);\r\n  const onFinish = async (values) => {\r\n    setLoading(true);\r\n    const { login, password } = values;\r\n    try {\r\n      const res = await server.patch(\"/auth/forgot-password\", { login });\r\n      if (res.status === 200) {\r\n        setIsOTP(true);\r\n        setLoading(false);\r\n        setCred(login);\r\n        setPassword(password);\r\n        notification[\"success\"]({\r\n          description: `${res?.data?.message}`,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: `${error.response?.data?.message}`,\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const onFinishFailed = () => {};\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <Title>Reset Password</Title>\r\n      {!isOTP ? (\r\n        <FormContainer>\r\n          <Form\r\n            form={form}\r\n            name=\"forgotpassword-form\"\r\n            layout=\"vertical\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n            requiredMark={\"optional\"}\r\n          >\r\n            <Form.Item\r\n              name=\"login\"\r\n              label={<label className=\"formLabel\">Email or Phone Number</label>}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Credential Required\",\r\n                },\r\n                () => ({\r\n                  validator(_, value) {\r\n                    if (EmailRegEx.test(value)) {\r\n                      return Promise.resolve();\r\n                    } else if (NumberRegEx.test(value) && value.length === 13) {\r\n                      return Promise.resolve();\r\n                    } else {\r\n                      return Promise.reject(\r\n                        new Error(\"Not an Email or a Phone Number\")\r\n                      );\r\n                    }\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <InputField\r\n                placeholder={\"Email or Phone Number\"}\r\n                //   prefix={<FaUser color=\"#545454\" />}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              label={<label className=\"formLabel\">New Password</label>}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Credential Required\",\r\n                },\r\n              ]}\r\n            >\r\n              <ResetFields placeholder={\"New Password\"} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"confirmpassword\"\r\n              label={<label className=\"formLabel\">Confirm New Password</label>}\r\n              dependencies={[\"password\"]}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please confirm your password!\",\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue(\"password\") === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\r\n                      new Error(\r\n                        \"The two passwords that you entered do not match!\"\r\n                      )\r\n                    );\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <ResetFields placeholder={\"New Password\"} />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <SubmitButton\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                loading={loading}\r\n                ref={BtnRef}\r\n              >\r\n                Find My Account\r\n              </SubmitButton>\r\n            </Form.Item>\r\n          </Form>\r\n        </FormContainer>\r\n      ) : (\r\n        <OtpInput\r\n          setVisible={setVisible}\r\n          login={cred}\r\n          type=\"resetpassword\"\r\n          password={password}\r\n        />\r\n      )}\r\n    </ModalContainer>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import React, { useState, useRef } from \"react\";\r\nimport {\r\n  SignInFromContainer,\r\n  LogoImg,\r\n  InputField,\r\n  InputFieldPassword,\r\n  SubmitButton,\r\n  BtnLink,\r\n  FSignInButtom,\r\n  GSignInButton,\r\n  ForgotBTN,\r\n  BTNContainer,\r\n} from \"./Elements\";\r\nimport Logo from \"../../../../assets/images/logo2.png\";\r\nimport { Form, Divider, Tooltip, message, Modal } from \"antd\";\r\nimport { FaUser, FaKey } from \"react-icons/fa\";\r\nimport { GoogleOutlined, FacebookFilled } from \"@ant-design/icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./style.scss\";\r\nimport Schema from \"async-validator\";\r\nimport { EmailRegEx, NumberRegEx } from \"../../../../helpers/regex\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { signIn } from \"../../../../Redux/actions/authActions\";\r\nimport ForgotPassword from \"../../../CustomComponents/ForgotPassword\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nSchema.warning = function () {};\r\n\r\nconst SignInForm = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [visible, setVisible] = useState(false);\r\n  const BtnRef = useRef(null);\r\n\r\n  const [form] = Form.useForm();\r\n  const onFinish = async (values) => {\r\n    BtnRef.current.blur();\r\n    setLoading(true);\r\n    form.resetFields();\r\n    const res = await dispatch(signIn(values));\r\n    if (!res) {\r\n      navigate(\"/\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const onFinishFailed = () => {\r\n    BtnRef.current.blur();\r\n    message.error(\"Please fill out the form\");\r\n  };\r\n\r\n  const onGoogleLogin = (response) => {\r\n    console.log(response);\r\n  };\r\n\r\n  return (\r\n    <SignInFromContainer>\r\n      <Modal\r\n        visible={visible}\r\n        footer={null}\r\n        centered\r\n        onCancel={() => setVisible(false)}\r\n        maskClosable={false}\r\n      >\r\n        <ForgotPassword setVisible={setVisible} />\r\n      </Modal>\r\n      <NavLink to=\"/\">\r\n        <LogoImg src={Logo} alt=\"Logo Img\" />\r\n      </NavLink>\r\n      <Form\r\n        form={form}\r\n        name=\"signin-form\"\r\n        layout=\"vertical\"\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        autoComplete=\"off\"\r\n        requiredMark={\"optional\"}\r\n      >\r\n        <Form.Item\r\n          name=\"login\"\r\n          label={<label className=\"formLabel\">Email or Phone Number</label>}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Credential Required\",\r\n            },\r\n            () => ({\r\n              validator(_, value) {\r\n                if (EmailRegEx.test(value)) {\r\n                  return Promise.resolve();\r\n                } else if (NumberRegEx.test(value) && value.length === 13) {\r\n                  return Promise.resolve();\r\n                } else {\r\n                  return Promise.reject(\r\n                    new Error(\"Not an Email or a Phone Number\")\r\n                  );\r\n                }\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <InputField\r\n            placeholder={\"Email or Phone Number\"}\r\n            prefix={<FaUser color=\"#545454\" />}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          label={<label className=\"formLabel\">Password</label>}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please enter your password\",\r\n            },\r\n            {\r\n              min: 6,\r\n              message: \"Must be more than 6 characters\",\r\n            },\r\n          ]}\r\n        >\r\n          <InputFieldPassword\r\n            settings={{\r\n              colorScheme: {\r\n                levels: [\"#ff3333\", \"#fe940d\", \"#ffd908\", \"#cbe11d\", \"#42ba96\"],\r\n              },\r\n              height: 3,\r\n              alwaysVisible: false,\r\n            }}\r\n            placeholder={\"Pass****\"}\r\n            prefix={<FaKey color=\"#545454\" />}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <SubmitButton\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            loading={loading}\r\n            ref={BtnRef}\r\n          >\r\n            Sign In\r\n          </SubmitButton>\r\n        </Form.Item>\r\n      </Form>\r\n      <BTNContainer justify=\"start\" type=\"flex\">\r\n        <ForgotBTN\r\n          onClick={() => {\r\n            setVisible(true);\r\n          }}\r\n        >\r\n          Forgot Password\r\n        </ForgotBTN>\r\n        <BtnLink to=\"/signup\">Sign Up</BtnLink>\r\n      </BTNContainer>\r\n\r\n      <Divider />\r\n      <Tooltip title=\"Sign in with Facebook\">\r\n        <FacebookLogin\r\n          appId={`${process.env.REACT_APP_FAUTHKEY}`}\r\n          callback={onGoogleLogin}\r\n          render={(renderProps) => (\r\n            <FSignInButtom\r\n              onClick={renderProps.onClick}\r\n              disabled={renderProps.disabled}\r\n              fields=\"name,email,picture\"\r\n              type=\"primary\"\r\n              icon={<FacebookFilled />}\r\n            >\r\n              Sign In\r\n            </FSignInButtom>\r\n          )}\r\n        />\r\n      </Tooltip>\r\n      <Tooltip title=\"Sign in with Google\" placement=\"bottom\">\r\n        <GoogleLogin\r\n          clientId={`${process.env.REACT_APP_GAUTHKEY}`}\r\n          render={(renderProps) => (\r\n            <GSignInButton\r\n              type=\"primary\"\r\n              onClick={renderProps.onClick}\r\n              disabled={renderProps.disabled}\r\n              icon={<GoogleOutlined />}\r\n            >\r\n              Sign In\r\n            </GSignInButton>\r\n          )}\r\n          onSuccess={onGoogleLogin}\r\n        />\r\n      </Tooltip>\r\n    </SignInFromContainer>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import React from \"react\";\r\nimport { SignInContainer, ImageContainer, FormContainer } from \"./Elements\";\r\nimport SignInImg from \"../../assets/images/signin-img.jpg\";\r\nimport SignInForm from \"../../Components/LayoutComponents/Forms/SignInForm\";\r\n\r\nconst transition = { duration: 0.6, ease: [0.6, 0.01, -0.05, 0.9] };\r\n\r\nconst LoginScreen = () => {\r\n  return (\r\n    <SignInContainer\r\n      initial={{ opacity: 0, y: -1000 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      exit={{ opacity: 0, y: -1000 }}\r\n      transition={{\r\n\r\n        duration: 2, type: \"tween\",\r\n        ...transition\r\n      }}\r\n    >\r\n      <ImageContainer src={SignInImg} alt=\"SignInImg\" />\r\n      <FormContainer bgImg={SignInImg}>\r\n        <SignInForm />\r\n      </FormContainer>\r\n    </SignInContainer>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n"],"sourceRoot":""}